import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import math
from sklearn import datasets, linear_model
from statsmodels.formula.api import ols

from google.colab import drive
drive.mount('/content/drive')



# Indicators that contribute to an individual to stop smoking
# 774 rows & 7 columns. Size: <1MB. Source: GHO
stop_smoking = "/content/drive/MyDrive/Datathon Materials/stop_smoking.csv"

# Average number of cigarettes sold per day on each year
# 2,767 rows & 4 columns. Size: <1MB. Source: ISS
daysales = "/content/drive/MyDrive/Datathon Materials/sales_per_day.csv"

# Worldwide tobacco usage
# 4,023 rows & 7 columns. Size: <1MB. Source: WHO
ww_use = "/content/drive/MyDrive/Datathon Materials/tobacco_use_ww.csv"

# Tobacco production by country and year
# 1,207 rows & 5 columns. Size: <1MB. Source: UNdata
production = "/content/drive/MyDrive/Datathon Materials/tobacco_production.csv"



# creation of pandas dataframes from csv files
stopdf = pd.read_csv(stop_smoking)
daysalesdf = pd.read_csv(daysales)
wwdf = pd.read_csv(ww_use)
proddf = pd.read_csv(production)

def stop_and_daily_merge(year1):
  '''
  Creates a merged df based on countries present in both the stopdf and 
  daysalesdf for a given year.
  '''
  df1 = stopdf[stopdf["Year"] == year1].set_index("Code")
  df2 = daysalesdf[daysalesdf["Year"] == year1].set_index("Code")

  df = pd.merge(df1, df2, left_index=True, right_index=True).drop(
      ["Entity_y", "Year_y"], axis=1)
  
  return df

# create a 2012 and 2014 dataframe for dailysales and stop_smoking
df2012 = stop_and_daily_merge(2012)
df2014 = stop_and_daily_merge(2014)

# combine the above two dataframes and drop unnecessary columns
changedf = pd.merge(df2012, df2014, left_index=True, right_index=True).drop\
  (["Entity_x_y", "AvgTaxesAsPctCigarettePrice_x", 
    "AvgTaxesAsPctCigarettePrice_y", "Year_x_x", "Year_x_y", 
    "EnforceBansTobaccoAd_x", "EnforceBansTobaccoAd_y"], axis=1)

# make a new column for the percent change in cigarette price from 2012 to 2014
changedf["2012to2014CigarettePriceChange(%)"] = \
        round(((changedf["AvgCigarettePriceDollars_y"] / \
               changedf["AvgCigarettePriceDollars_x"]) - 1)*100, 2)

# make a new column for the percent change in daily sale price from 2012 to 2014
changedf["2012to2014DailySaleChange(%)"] = round(((changedf["amt_y"] / \
                                               changedf["amt_x"]) - 1)*100, 2)

# Removing all unncessary columns and renaming awkard columns (HelpToQuit 
# did not change from 2012 to 2014 so we can get rid of one of the HelpToQuit 
# columns)
changedf.drop(["AvgCigarettePriceDollars_x","AvgCigarettePriceDollars_y", 
               "amt_x", "amt_y", "HelpToQuit_x"], axis=1, inplace=True)
changedf.rename(columns={"HelpToQuit_y":"HelpToQuit", 
                            "Entity_x_x":"Country"}, inplace=True)

changedf



g_arr = ["Male", "Both sexes", "Female"]

def perc_find(value2012, value2014):
  '''
  Finds the percent change from 2012 to 2014 of smoking percatage of a given 
  gender.
  '''
  return round(((value2012 / value2014)-1)*100, 2)


def value2012finder(country_code, year):
  '''
  Estimates the 2012 values for Male, Female, and both sexes for a specific
  country.
  '''
  g_tup = ()
  for gender in g_arr:
    # restrict the dataframe to a specific country and gender
    w = wwdf[wwdf["SpatialDimValueCode"] == country_code].\
      loc[wwdf["Gender"] == gender]
    length = w.shape[0]
    # reshape x and y to run a regression model
    x = w["Year"].values.reshape(length, 1)
    y = w["Value"].values.reshape(length, 1)

    model = linear_model.LinearRegression()
    model.fit(x, y)

    intercept = model.intercept_[0]
    beta = model.coef_[0][0]

    # approximate the value of smoking value in 2012 using the coefficient and 
    # intercept of our model
    v = intercept + (beta * year)
    g_tup += (round(v, 1),)

  return g_tup


wwdict = {}

for code in changedf.index:
  w = wwdf[wwdf["SpatialDimValueCode"] == code].loc[wwdf["Year"] == 2014]
  # may be some countries which are missing, so check to make sure we have data
  if not w.empty:
    # no data given for 2012 values, so we estimate it using regression
    m, b, f = value2012finder(code, 2012)
    # have our dictionary keys associated with the difference in value from 
    # 2012 to 2014 based on gender
    wwdict[code] = [perc_find(w["Value"].iloc[0], f), 
                       perc_find(w["Value"].iloc[1], b), 
                       perc_find(w["Value"].iloc[2], m)]

# turn our dictionary into a pandas dataframe
ww2014df = pd.DataFrame.from_dict(wwdict, orient='index')
# give a meaningful name to the columns of our dataframe
ww2014df.columns = ["2012to2014FemaleValueChange(%)", 
                    "2012to2014BothSexesValueChange(%)", 
                    "2012to2014MaleValueChange(%)"]

# dataframe that adds gender value in smoking percentage to changedf
genderdailydf = pd.merge(changedf, ww2014df, left_index=True, right_index=True)

genderdailydf.drop(["HelpToQuit", "2012to2014CigarettePriceChange(%)", 
                    "2012to2014DailySaleChange(%)"], axis=1)
                    
                    
                    
 def stop_and_ww_merge(year3):
  '''
  Creates a merged dataframe of stop_smoking and worldwide use data based on a
  given year and drops a few unnecessary columns.
  '''
  restrictdf = stopdf[stopdf["Year"] == year3]
  focuswwdf = wwdf[wwdf["Year"] == year3]
  restrictdf.set_index("Code", inplace=True)
  focuswwdf.set_index("SpatialDimValueCode", inplace=True)
  mergedf = pd.merge(restrictdf, focuswwdf, left_index=True, right_index=True)
  mergedf.drop(["ParentLocationCode", "ParentLocation", "Year_y", 
                          "AvgTaxesAsPctCigarettePrice", "Location"], 
                          axis=1, inplace=True)
  
  return mergedf


# create a merged stop_smoking and ww_use dataframe for 2010 and 2014
mergedf2010 = stop_and_ww_merge(2010)
mergedf2014 = stop_and_ww_merge(2014)

# combine the two dataframes above
yearcombodf = mergedf2010.append(mergedf2014).reset_index()
yearcombodf.rename(columns={"Year_x":"Year", "index":"Code", 
                            "Entity":"Country"}, inplace=True)
yearcombodf
yearcombodf.to_csv('yearcombodf.csv') #Save File     



# add a new column with zeros for every value
yearcombodf["log(GDP)"] = 0

# take in gdp data from worldbank
gdpdf = pd.read_csv("/content/drive/MyDrive/Datathon Materials/gdpdata.csv")

gdpdf.drop(["Indicator Name", "Indicator Code"], axis=1, inplace=True)
# restrict gdp data to the years that are available in yearcombodf
gdpdf = gdpdf[["Country Code", "2010", "2014"]]

# loop over every unique country
for c in yearcombodf["Code"].unique():
  w = gdpdf[gdpdf["Country Code"] == c]
  if not w.empty:
    # if either the 2010 or 2014 data is NaN, then go to the next iteration of
    # the loop
    if np.isnan(float(w["2010"])):
      continue
    if np.isnan(float(w["2014"])):
      continue
    # change the value of gdp for a set country and year based on the gdp 
    # dataframe
    yearcombodf.loc[(yearcombodf["Code"] == c) & \
                    # note that we use a log transformation as is standard 
                    # practice with monetary units in statistics
                    (yearcombodf["Year"] == 2010), "log(GDP)"] = \
                    round(float(np.log(w.iloc[:, 1])), 2)
    yearcombodf.loc[(yearcombodf["Code"] == c) & \
                    (yearcombodf["Year"] == 2014), "log(GDP)"] = \
                    round(float(np.log(w.iloc[:, 2])), 2)

# remove all rows which were not changed from 0
gdpcombodf = yearcombodf[yearcombodf["log(GDP)"] != 0]
gdpcombodf.reset_index(inplace=True)
gdpcombodf.drop(["index"], axis=1, inplace=True)

gdpcombodf.to_csv('gdpcombodf.csv')



def gender_gdp_df(gender):
  '''
  Makes of subset of gdpcombodf according to gender.
  '''
  df = gdpcombodf.loc[gdpcombodf["Gender"] == gender].reset_index()
  df.drop(["index"], axis=1, inplace=True)

  return df


gdpdf_both = gender_gdp_df("Both sexes")
gdpdf_male = gender_gdp_df("Male")
gdpdf_female = gender_gdp_df("Female")

def gdp_x_and_y(year, gender):
  '''
  Finds the x and y values needed for linear regression based on the year and
  gender.
  '''
  if gender == "Male":
    df = gdpdf_male
  if gender == "Both":
    df = gdpdf_both
  if gender == "Female":
    df = gdpdf_female

  length = df.loc[df["Year"] == year].shape[0]

  x = df["log(GDP)"].loc[df["Year"] == year].\
    values.reshape(length, 1)
  y = df["Value"].loc[df["Year"] == year].\
    values.reshape(length, 1)

  return (x, y)
  

# grab x and y values for regression for both sexes
x2010, y2010 = gdp_x_and_y(2010, "Both")
x2014, y2014 = gdp_x_and_y(2014, "Both")


def gdp_plot(x, y):
  '''
  Plots log(GDP) against smoking percentage given an x and y value.
  '''
  plt.plot(x, y, 'o')
  m, b = np.polyfit(x.flatten(), y.flatten(), 1)
  plt.plot(x.flatten(), (m*x.flatten()) + b)

  return plt


# plot log(GDP) against smoking percentage for the years 2010 and 2014
gdp_plot(x2010, y2010)
gdp_plot(x2014, y2014)

# label the plots and add a key for clarity
plt.xlabel("log(GDP)")
plt.ylabel("Both Sexes Smoking Percentage")
plt.title("2010 and 2014 Both Sexes Smoking Percentage Based on log(GDP)", \
          fontdict = {'fontsize' : 10})
plt.legend(["2010", "2010 Line", "2014", "2014 Line"])
plt.show()



# grab x and y values for regression for males
x2010_m, y2010_m = gdp_x_and_y(2010, "Male")
x2014_m, y2014_m = gdp_x_and_y(2014, "Male")

# grab x and y values for regression for females
x2010_f, y2010_f = gdp_x_and_y(2010, "Female")
x2014_f, y2014_f = gdp_x_and_y(2014, "Female")


# plot the male values for log(GDP) and smoking percentage
gdp_plot(x2010_m, y2010_m)
gdp_plot(x2014_m, y2014_m)

plt.xlabel("log(GDP)")
plt.ylabel("Male Smoking Percentage")
plt.title("2010 and 2014 Male Smoking Percentage Based on log(GDP)", \
          fontdict = {'fontsize' : 10})
plt.legend(["2010", "2010 Line", "2014", "2014 Line"])
plt.show()


# plot the female values for log(GDP) and smoking percentage
gdp_plot(x2010_f, y2010_f)
gdp_plot(x2014_f, y2014_f)

plt.xlabel("log(GDP)")
plt.ylabel("Female Smoking Percentage")
plt.title("2010 and 2014 Female Smoking Percentage Based on log(GDP)", \
          fontdict = {'fontsize' : 10})
plt.legend(["2010", "2010 Line", "2014", "2014 Line"])
plt.show()



both_model = gdpdf_both.rename(columns={"log(GDP)":"GDP"})

fit = ols('GDP ~ C(HelpToQuit)', data=both_model).fit()

fit.summary()

fit_male = ols('Value ~ C(HelpToQuit) + C(EnforceBansTobaccoAd)', data=gdpdf_male).fit() 

fit_male.summary()

fit_fem = ols('Value ~ C(HelpToQuit) + C(EnforceBansTobaccoAd)', data=gdpdf_female).fit() 

fit_fem.summary()

gdpdf_male.rename(columns={"log(GDP)":"GDP"}, inplace=True)

fit_male_gdp = ols('Value ~ C(HelpToQuit) + C(EnforceBansTobaccoAd) + GDP', \
          data=gdpdf_male).fit() 

fit_male_gdp.summary()

gdpdf_female.rename(columns={"log(GDP)":"GDP"}, inplace=True)

fit_fem_gdp = ols('Value ~ C(HelpToQuit) + C(EnforceBansTobaccoAd) + GDP', \
          data=gdpdf_female).fit() 

fit_fem_gdp.summary()
